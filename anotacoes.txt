> foi utilizado $ npm i --save @rocketseat/omni para criar o instalador de projetos
> apos isso $ ./node_modules/.bin/omni init modulo11 --only=server, com isso seja gerado o projeto
> cria-se o '.env'
> ir em app.js e descomentar a importação do banco...

Sera usado o JEST
$ yarn test <<< roda os testes
$ yarn add jest -D
$ yarn jest --init
> dê "y" para todas as opções
> crie a pasta __tests__ na raiz do projeto
> foi criado jest.config.js {
    bail: 1 => para os testes assim que for encontrado o primeiro erro
    collectCoverage: true
    coverageDirectory: '__tests__/coverage'
    collectCoverageFrom: ['src/app/**/*.js'] => teste SOMENTE os arquivos .js dentro de src/app
    coverageReporters : [
        "text",
        "lcov"
    ]
    testMatch: [  ONDE SE ENCONTRAM OS ARQUIVOS DE TESTE
        "**/__tests__/**/*.test.js",
    ]
}
> por padrao o node usa a sintaxe de 'require' do commonJS, é necessario adicionar $ yarn add --dev @sucrase/jest-plugin
adicione o codigo em jest.config.js {
    transform: {
        ".(js|jsx|ts|tsx)": "@sucrase/jest-plugin"
    },
}
> muda-se o nodemon.json {
    "ignore": [
        "__tests__"
    ]
}
> dica: mesmo que nao esteja usando TypeScript, pode-se instalar $ yarn add -D @types/jest para ter o auto complete
> se começa a criar os testes, é necessario a extensão ser '.test.js'
> é necessario criar um .env.test
> foi alterado as configurações de conexao com o banco QUANDO os testes forem rodar (veja o arquivo \config\database.js ), observe que caso for testes, sera usado o banco sqlite
> como agora existem o .env e o .env.test é necessario fazer uma validação de qual .env executar
> foi criado src/bootstrap.js , que é responsavel por inicializar algumas configs
> foi importado 'bootstrap.js dentro de app.js'
> foi importado 'bootstrap.js' dentro de src\config\database.js
> tambem é necessario no "script" test do package.json, setar SET NODE_ENV=test ( veja o arquivo )
> ir em src\config\database.js , e colocar condicional se e pra usar o banco de testes ou real {
    adicione tambem >> storage: './__test__/database.sqlite' <<
}


INICIANDO O TESTES {
    > nao é recomendado os testes serem rodados no banco de produção ou desenvolvimento
    > foi adicionado scrips no package.json para rodar ANTES E DEPOIS do script de test
    > ao adicionar "pre"{NOME_DA_CHAVE_DO_SCRIPT} no package , se executa uma função antes desse script
    > ao adicionar "post"{NOME_DA_CHAVE_DO_SCRIPT} no package , se executa uma função depois desse script
    > MUITA ATENÇÃO: cuidado com "espaços" ao usar o 'set NODE_ENV' no package.json
    > no package.json foi criado o script "pretest" para rodar as migrations no banco de testes
    > no package.json foi criado o script "posttest" para APAGAR as migrations no banco de testes
    > atente-se para instalar $ yarn add sqlite3 -D  se for necessario
    $ yarn add supertest -D
    > sera usado o supertest para fazer as requisições no ambiante de testes
    > cada vez que um teste for rodar, seria interessante ter um ambiente completamente isolado e NOVO para cada testes
    > foi criado a pasta 'util' , onde sera criado funções para auxiliar nos testes
    > froi criado util/truncate.js que sera responsavel por zerar as tabelas antes de cada teste rodar
    > "lifeCycleTest" {
        beforeAll() : execute UMA vez antes dos testes
        beforeEach() : execute UMA vez antes de CADA teste
        afterAll()
        afterEach
    }
    > caso os "logging" de queries no database estejam atrapalhando a visualisação do resumo dos testes, é possivel passar uma configuração nas configs do database chamada "logging: false", com isso nao sera mostrado mais loggins de queries
    Dados fakes {
        $ yarn add -D factory-girl faker
        > foi criado o arquivo factories.js ( veja o arquivo )
        > depois de feito o arquivo factories.js é necessario atualizar o user.test.js para utilizar dados fakes
        OBS > quando se passa "dados de criação" para o factory.create, ele SOBESCREVE os dados fakes...
        > factory.attrs('{NOME_DA_FACTORY}') , retorna apenas os dados aleatorios
    }
}





